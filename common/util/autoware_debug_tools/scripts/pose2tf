#!/usr/bin/env python

from __future__ import print_function

import argparse
import sys

import rospy
import tf
from geometry_msgs.msg import PoseStamped


class Pose2TfNode:
    def __init__(self, options):
        self._options = options
        self._tf_broadcaster = tf.TransformBroadcaster()
        self._sub_pose = rospy.Subscriber(self._options.topic_name, PoseStamped, self._on_pose, queue_size=1)

    def _on_pose(self, msg):
        try:
            (trans, quat) = Pose2TfNode.create_transform(msg.pose)
            self._tf_broadcaster.sendTransform(
                trans, quat, msg.header.stamp, self._options.tf_name, msg.header.frame_id
            )
        except Exception as e:
            print(e)

    @staticmethod
    def create_transform(pose):
        trans = [pose.position.x, pose.position.y, pose.position.z]
        quat = [pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w]

        return (trans, quat)


def main(args):
    rospy.init_node("pose2tf")

    parser = argparse.ArgumentParser()
    parser.add_argument("topic_name", type=str)
    parser.add_argument("tf_name", type=str)
    ns = parser.parse_args(args)

    Pose2TfNode(ns)
    rospy.spin()


if __name__ == "__main__":
    main(sys.argv[1:])
